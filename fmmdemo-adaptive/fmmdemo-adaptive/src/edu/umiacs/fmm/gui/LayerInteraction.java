/*
 * LayerInteraction.java
 *
 * Created on November 6, 2004, 8:25 PM
 */

package edu.umiacs.fmm.gui;
import java.util.*;
import edu.umiacs.fmm.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
/**
 *
 * @author  wpwy
 */
public class LayerInteraction extends javax.swing.JPanel {
    
    /** Creates new form LayerInteraction */
    public LayerInteraction() {
        initComponents();
        ToolTipManager.sharedInstance().registerComponent(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPopupMenu1 = new javax.swing.JPopupMenu();
        dialogLayerInteraction1 = new edu.umiacs.fmm.gui.dialog.DialogLayerInteraction();

        dialogLayerInteraction1.setLocationRelativeTo(this);
        dialogLayerInteraction1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dialogLayerInteraction1PropertyChange(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        setToolTipText("test");
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(512, 512));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

    }//GEN-END:initComponents

    private void dialogLayerInteraction1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dialogLayerInteraction1PropertyChange
        // TODO add your handling code here:
        dialogLayerInteraction1PropertyChangeHelper(evt);
    }//GEN-LAST:event_dialogLayerInteraction1PropertyChange
        
    private void dialogLayerInteraction1PropertyChangeHelper(java.beans.PropertyChangeEvent evt) {   
        if (evt.getPropertyName().equals("visible")) {
            //System.out.println("got window close.");
            setViewBox(null);
        }
        else if (evt.getPropertyName().equals("viewBoxes")){
            setViewBoxes((Vector<edu.umiacs.fmm.Box>)evt.getNewValue());
        }
    }
    
    private void dialogLayerInteraction1WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogLayerInteraction1WindowClosing
        // TODO add your handling code here:
        dialogLayerInteraction1WindowClosingHelper();
    }//GEN-LAST:event_dialogLayerInteraction1WindowClosing
    private void dialogLayerInteraction1WindowClosingHelper(){
        setViewBox(null);
    }
    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        // TODO add your handling code here:
        //currBox=null;
        repaint();
    }//GEN-LAST:event_formMouseExited
    
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        formMouseMovedHelper(evt);
    }//GEN-LAST:event_formMouseMoved
    private void formMouseMovedHelper(java.awt.event.MouseEvent evt) {
        //System.out.println("moved");
        //System.out.println(evt.getPoint());
        //if (mouseOverEnabled){
        edu.umiacs.fmm.Point fmmP = edu.umiacs.fmm.gui.Util.awtToFmmPoint(evt.getPoint(), proportion);
        //System.out.println(fmmP);
        currBox = null;
        if (highlightBoxes.size()!=0 && enabled){
            for (edu.umiacs.fmm.Box b:highlightBoxes) {
                if (edu.umiacs.fmm.gui.Util.pointLocationInBox(fmmP, b))
                    currBox = b;
            }
            //System.out.println("mouseoverbox is "+mouseOverBox.getLevel()+" "+mouseOverBox.getIndex());
        }
        if (currBox==null)
            toolTipText = null;
        else {
            toolTipText = "Box "+currBox.getLabel();
        }
        repaint();
        //}
    }
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()){
            //System.out.println("Show Menu");
            showPopMenu(evt);
        }
    }//GEN-LAST:event_formMouseReleased
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        if (evt.isPopupTrigger()){
            //System.out.println("Show Menu");
            showPopMenu(evt);
        }
    }//GEN-LAST:event_formMousePressed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        formMouseClickedHelper(evt);
    }//GEN-LAST:event_formMouseClicked
    private void formMouseClickedHelper(java.awt.event.MouseEvent evt){
        clickPoint = evt.getPoint();
        if (evt.getButton()==java.awt.event.MouseEvent.BUTTON1){
            if (evt.getClickCount()==1)
                setHighlightPointBox();
            else if (evt.getClickCount()>1){
                if (this.highlightBoxes.size()>0)
                    showDialog(this.highlightBoxes.elementAt(highlightBoxes.size()-1));
            }
            repaint();
        }
    }
    private void showPopMenu(java.awt.event.MouseEvent evt){
        jPopupMenu1.setVisible(false);
        jPopupMenu1 = new javax.swing.JPopupMenu();
        java.awt.Font boldFont = new java.awt.Font("Dialog", java.awt.Font.BOLD, 12);
        java.awt.Font regFont = new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12);
        for (final edu.umiacs.fmm.Box b:highlightBoxes){
            JMenuItem jMenuItem1 = new javax.swing.JMenuItem();
            if (b==this.currBox)
                jMenuItem1.setFont(boldFont);
            else
                jMenuItem1.setFont(regFont);
            jMenuItem1.setText("Box "+b.getLabel());
            jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    showDialog(b);
                }
            });
            jPopupMenu1.add(jMenuItem1,0);
        }
        //jPopupMenu1.setLocation(evt.getPoint());
        jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        //jPopupMenu1.setVisible(true);
    }
    
    private void showDialog(edu.umiacs.fmm.Box b){
        dialogLayerInteraction1.setFmmBox(b);
        dialogLayerInteraction1.setFmmTree(fmmTree);
        dialogLayerInteraction1.refreshTreeModel();
        setViewBox(b);
        this.dialogLayerInteraction1.setVisible(true);
    }
    
    public void addViewBox(edu.umiacs.fmm.Box b){
        viewBoxes.addElement(b);
    }
    public void setViewBox(edu.umiacs.fmm.Box b){
        resetViewBoxes();
        if (b!=null)
            addViewBox(b);
        repaint();
    }
    public void resetViewBoxes(){
        this.viewBoxes = new Vector<edu.umiacs.fmm.Box>();
    }
    public void setViewBoxes(Vector<edu.umiacs.fmm.Box> bs){
        this.viewBoxes = bs;
        repaint();
    }
    private void setHighlightPointBox(){
        if (fmmTree!=null){
            int level = fmmTree.getStruct().size()-1;
            edu.umiacs.fmm.Point fmmPoint = edu.umiacs.fmm.gui.Util.awtToFmmPoint(clickPoint, proportion);
            int boxIndex = fmmPoint.getBoxIndex(level);
            edu.umiacs.fmm.Box tmpBox = fmmTree.getBox(level,boxIndex);
            
            //did we have a highlight box before?
            edu.umiacs.fmm.Box oldHighlightBox = null;
            if (highlightBoxes.size()>0)
                oldHighlightBox = highlightBoxes.elementAt(highlightBoxes.size()-1);
            
            //clear the boxes regardless
            highlightBoxes = new Vector<edu.umiacs.fmm.Box>();
            
            //if we didn't have a highlight box before or if we had a different one,
            //if (oldHighlightBox==null || oldHighlightBox!=tmpBox) {
            highlightBoxes.addElement(tmpBox);
            currBox = tmpBox;
            for (int i=level; i>0; i--){
                tmpBox = tmpBox.getParent();
                highlightBoxes.insertElementAt(tmpBox,0);
            }
            //}
            //otherwise a click on the same box clears the highlightboxes.
        }
    }
    public void clear() {
        clickPoint = null;
        highlightBoxes = new Vector<edu.umiacs.fmm.Box>();
        currBox = null;
        toolTipText = null;
        repaint();
    }
    public String getToolTipText(java.awt.event.MouseEvent evt){
        return getToolTipText();
    }
    public String getToolTipText(){
        return toolTipText;
    }
    public void setToolTipText(String text){
        this.toolTipText = text;
    }
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        if (highlightBoxes.size()!=0 && enabled){
            int colorStepSize = 200/highlightBoxes.size();
            colorStepSize = Math.min(colorStepSize, Constants.ANIM_MAX_COLOR_STEPSIZE);
            int currColor = 255;
            int mouseOverColor = 0;
            for (edu.umiacs.fmm.Box b:highlightBoxes){
                g2.setPaint(new java.awt.Color(currColor, currColor, currColor));
                currColor-=colorStepSize;
                java.awt.Point corner = edu.umiacs.fmm.gui.Util.getBoxNECorner(b,proportion);
                int width = (int)(b.getSize()*proportion);
                g2.fillRect(corner.x, corner.y-1, width+1, width+1);
            }
        }
        
        if (viewBoxes.size()>0 && enabled){
            g2.setPaint(new java.awt.Color(0, 255, 255));
            for (edu.umiacs.fmm.Box b:viewBoxes){
                java.awt.Point corner = edu.umiacs.fmm.gui.Util.getBoxNECorner(b,proportion);
                int width = (int)(b.getSize()*proportion);
                g2.fillRect(corner.x, corner.y-1, width+1, width+1);
            }
        }
        
    }
    /**
     * Getter for property fmmTree.
     * @return Value of property fmmTree.
     */
    public edu.umiacs.fmm.FmmTree getFmmTree() {
        
        return this.fmmTree;
    }
    
    /**
     * Setter for property fmmTree.
     * @param fmmTree New value of property fmmTree.
     */
    public void setFmmTree(edu.umiacs.fmm.FmmTree fmmTree) {
        
        this.fmmTree = fmmTree;
    }
    public void setEnabled(boolean enabled){
        this.enabled = enabled;
        if (!enabled)
            clear();
    }
    public boolean isEnabled(){
        return this.enabled;
    }
    
    public int getProportion(){
        return proportion;
    }
    public void setProportion(int p){
        proportion = p;
        setSize(p, p);
        this.setPreferredSize(new Dimension(p, p));
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private edu.umiacs.fmm.gui.dialog.DialogLayerInteraction dialogLayerInteraction1;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables
    java.awt.Point clickPoint = null;
    edu.umiacs.fmm.FmmTree fmmTree = null;
    //the mouseover stuff.  this box is not painted but we keep track of it internally.
    edu.umiacs.fmm.Box currBox = null;
    //the boxes currently highlighted.  highlight is activated after a click in the box.
    Vector<edu.umiacs.fmm.Box> highlightBoxes = new Vector<edu.umiacs.fmm.Box>();
    //the boxes being viewed in the dialog.  user interaction in the dialog can change this vector.
    Vector<edu.umiacs.fmm.Box> viewBoxes = new Vector<edu.umiacs.fmm.Box>();
    String toolTipText = null;
    boolean enabled = true;
    int proportion = Constants.ANIM_PROPORTION;
    
    //DialogLayerInteraction dialogLayerInteraction1=new DialogLayerInteraction();
}
