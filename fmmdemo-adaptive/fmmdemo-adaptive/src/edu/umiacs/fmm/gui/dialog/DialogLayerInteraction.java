/*
 * DialogLayerInteraction.java
 *
 * Created on November 7, 2004, 11:33 AM
 */

package edu.umiacs.fmm.gui.dialog;
import java.util.*;
import javax.swing.tree.*;
import edu.umiacs.fmm.gui.*;
/**
 *
 * @author  wpwy
 */
public class DialogLayerInteraction extends javax.swing.JDialog {
    public DialogLayerInteraction(){
        super();
        initComponents();
    }
    /** Creates new form DialogLayerInteraction */
    public DialogLayerInteraction(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void setFmmBox(edu.umiacs.fmm.Box b){
        this.fmmBox = b;
        this.setViewBox(b);
        this.jLabelTitle.setText("Properties of Box "+b.getLabel());
    }
    public void setViewBox(edu.umiacs.fmm.Box b){
        Vector<edu.umiacs.fmm.Box> tmpViewBox = new Vector<edu.umiacs.fmm.Box>();
        tmpViewBox.addElement(b);
        this.setViewBoxes(tmpViewBox);
    }
    public edu.umiacs.fmm.Box getFmmBox(){
        return fmmBox;
    }
    public void setFmmTree(edu.umiacs.fmm.FmmTree tree){
        this.fmmTree = tree;
    }
    public edu.umiacs.fmm.FmmTree getFmmTree(){
        return fmmTree;
    }
    public TreeModelBoxProperties generateTreeModel(){
        return new TreeModelBoxProperties(fmmBox, fmmTree);
    }
    public void refreshTreeModel(){
        this.jTree1.setModel(new TreeModelBoxProperties(fmmBox, fmmTree));
        this.jTree1.setSelectionRow(0);
        this.jTree1.repaint();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanelTitle = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jScrollPaneMain = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTree1.getSelectionModel().setSelectionMode(javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
        jPanelOK = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setModal(true);
        setName("Properties");
        jPanelTitle.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabelTitle.setFont(new java.awt.Font("Dialog", 1, 12));
        jLabelTitle.setText("Properties of Box ");
        jPanelTitle.add(jLabelTitle);

        getContentPane().add(jPanelTitle, java.awt.BorderLayout.NORTH);

        jScrollPaneMain.setPreferredSize(new java.awt.Dimension(400, 322));
        jTree1.setModel(generateTreeModel());
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });

        jScrollPaneMain.setViewportView(jTree1);

        getContentPane().add(jScrollPaneMain, java.awt.BorderLayout.CENTER);

        jPanelOK.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanelOK.add(jButtonOK);

        getContentPane().add(jPanelOK, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents
    
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        if (node == null) return;        
        Object nodeInfo = node.getUserObject();
        if (nodeInfo instanceof String){
            String nodeName = nodeInfo.toString();
            if (nodeName.equals("Children") || nodeName.equals("Neighbors") || nodeName.equals("E4 Neighborhood")){
                Enumeration children = node.children();
                Vector<edu.umiacs.fmm.Box> tmpViewBoxes = new Vector<edu.umiacs.fmm.Box>();
                
                while (children.hasMoreElements()){
                    Object childNodeInfo = ((DefaultMutableTreeNode)children.nextElement()).getUserObject();
                    if (childNodeInfo instanceof edu.umiacs.fmm.Box)
                        tmpViewBoxes.addElement((edu.umiacs.fmm.Box)childNodeInfo);
                }
                setViewBoxes(tmpViewBoxes);
            }
            else {//selected some other node.  reset viewbox to root
                Object rootInfo = ((DefaultMutableTreeNode)jTree1.getModel().getRoot()).getUserObject();
                setViewBox((edu.umiacs.fmm.Box)rootInfo);
            }
        }
        else if (nodeInfo instanceof edu.umiacs.fmm.Box) {
            setViewBox((edu.umiacs.fmm.Box)nodeInfo);
        }
        
    }//GEN-LAST:event_jTree1ValueChanged
    
    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        propertyChangeSupport.firePropertyChange("visible", true, false);
        //fireWindowListenerWindowClosing(new java.awt.event.WindowEvent(null,0));
    }//GEN-LAST:event_jButtonOKActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DialogLayerInteraction(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    /**
     * Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        
        propertyChangeSupport.addPropertyChangeListener(l);
    }
    
    /**
     * Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        
        propertyChangeSupport.removePropertyChangeListener(l);
    }
    
    /**
     * Getter for property viewBoxes.
     * @return Value of property viewBoxes.
     */
    public Vector<edu.umiacs.fmm.Box> getViewBoxes() {
        
        return this.viewBoxes;
    }
    
    /**
     * Setter for property viewBoxes.
     * @param viewBoxes New value of property viewBoxes.
     */
    public void setViewBoxes(Vector<edu.umiacs.fmm.Box> viewBoxes) {
        
        Vector<edu.umiacs.fmm.Box> oldViewBoxes = this.viewBoxes;
        this.viewBoxes = viewBoxes;
        propertyChangeSupport.firePropertyChange("viewBoxes", oldViewBoxes, viewBoxes);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JPanel jPanelOK;
    private javax.swing.JPanel jPanelTitle;
    private javax.swing.JScrollPane jScrollPaneMain;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    
    private edu.umiacs.fmm.Box fmmBox=null;
    private edu.umiacs.fmm.FmmTree fmmTree = null;
    
    /**
     * Utility field used by event firing mechanism.
     */
    private javax.swing.event.EventListenerList listenerList =  null;
    
    /**
     * Holds value of property viewBoxes.
     */
    private Vector<edu.umiacs.fmm.Box> viewBoxes = new Vector<edu.umiacs.fmm.Box>();
    
    /**
     * Utility field used by bound properties.
     */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
}
